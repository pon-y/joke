{"version":3,"sources":["components/Joke.module.css","components/InputForm.module.css","components/JokeContainer.module.css","App.module.css","components/Joke.js","components/requestJoke.js","components/InputForm.js","components/JokeContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Joke","Author","JokeContent","invalidJoke","loadingMessage","formContainer","text","button","JokeContainer","App","props","joke","react_default","a","createElement","className","styles","isInvalidStyle","visibility","isInvalid","style","dangerouslySetInnerHTML","__html","author","requestJoke","jokeId","arguments","length","undefined","invalid","url","concat","fetch","then","response","status","json","Promise","reject","myJson","data","value","catch","reason","Number","resolve","setTimeout","InputForm","callRandomJoke","userInput","handleInputChange","handleInputSubmit","disableInput","loading","isNaN","type","name","onChange","onClick","disabled","state","currentJoke","oldJokes","invalidRequest","jokeTimer","getNewJoke","id","_this","setState","Object","objectSpread","hasOwnProperty","_ref","console","log","e","target","clearTimeout","preventDefault","this","DOMPurify","sanitize","components_Joke","components_InputForm","Component","components_JokeContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bce761d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Joke\":\"Joke_Joke__cnodd\",\"Author\":\"Joke_Author__x3V4C\",\"JokeContent\":\"Joke_JokeContent__14LKL\",\"invalidJoke\":\"Joke_invalidJoke__1z4p9\",\"loadingMessage\":\"Joke_loadingMessage__27sW_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"InputForm_formContainer__WP0Lf\",\"text\":\"InputForm_text__2tjIJ\",\"button\":\"InputForm_button__3EmaR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"JokeContainer\":\"JokeContainer_JokeContainer__UZ1bV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React from 'react';\n\nimport styles from './Joke.module.css';\n\nfunction Joke ( props ) {\n let joke = <div className={styles.loadingMessage}>Loading random Joke...</div>;\n\n let isInvalidStyle = {visibility: 'visible'}\n   if( props.isInvalid === true) {\n     isInvalidStyle = {visibility: 'visible'}\n   } else {\n    isInvalidStyle = {visibility: 'hidden'}\n   }\n \n if(props.joke !== '') {\n   joke = (\n   <div className={styles.Joke}>\n     <div className={styles.invalidJoke} style={isInvalidStyle}> Well... We couldn't find that joke. Have a random joke instead! </div>\n    <div className={styles.JokeContent}dangerouslySetInnerHTML={{__html: props.joke}} />\n    <div className={styles.Author}> - {props.author}</div>\n   </div>)\n }\n\n  return (\n    <div>\n     {joke}\n    </div>\n   \n  )\n}\n\nexport default Joke;","const requestJoke = (jokeId = '', invalid = false) => {\n  let url = 'https://jokes-api.herokuapp.com/api/joke'\n\n  if (typeof jokeId === 'number') {\n    url = `https://jokes-api.herokuapp.com/api/joke/${jokeId}`;\n  }\n\n  return fetch(url)\n    .then(response => {\n      if(response.status === 200) {\n        return response.json();\n      } else {\n          return Promise.reject(response.status);\n      }\n     })\n    .then(myJson => {\n      return {data: myJson.value, isInvalid: invalid};\n    })\n    .catch(reason => {\n      if(Number(reason) >= 500) {\n        return requestJoke(jokeId);\n      } else if (Number(reason) === 404) {\n        return requestJoke('', true);\n      }\n      else if (Number(reason) === 429) {\n        return new Promise((resolve, reject) => {\n          setTimeout(()=> {\n            resolve(requestJoke(jokeId));\n          }, 5200);\n        });\n      }\n    });\n}\n\nexport default requestJoke;","import React from 'react';\nimport styles from './InputForm.module.css';\n\nfunction InputForm ( props ) {\n\n  const {callRandomJoke, userInput, handleInputChange, handleInputSubmit, loading} = props;\n  let disableInput = false;\n\nif( loading || isNaN(Number(userInput))) {\n  disableInput = true;\n} else {\n  disableInput = false;\n}\n  return (\n    <form className={styles.formContainer}>\n      <label>\n        <i className={styles.text}>Looking for a specific joke? Enter the id here:</i>\n        <input type=\"text\" name=\"userInput\" value={userInput} onChange={handleInputChange}/>\n      </label>\n     <button className={styles.button} onClick={handleInputSubmit} disabled={disableInput}> Go! </button>\n     <button className={styles.button}  disabled={disableInput} onClick={callRandomJoke}> Random Joke </button>\n  </form>\n  )\n}\n\nexport default InputForm;","import React, { Component } from 'react';\nimport DOMPurify from 'dompurify';\n\nimport styles from './JokeContainer.module.css';\nimport Joke from './Joke';\nimport requestJoke from './requestJoke';\nimport InputForm from './InputForm';\n\n\nclass JokeContainer extends Component {\n  state = {\n    currentJoke: null,\n    jokeId: null,\n    oldJokes: {},\n    userInput: '',\n    invalidRequest: false,\n    jokeTimer: null\n  }\n\n\n  getNewJoke = (id = '') => {\n    this.setState({currentJoke: null});\n    let oldJokes = {...this.state.oldJokes};\n    if(oldJokes.hasOwnProperty(id)) {\n      const jokeTimer = setTimeout(()=> this.getNewJoke(), 20000);\n      this.setState({currentJoke: oldJokes[id], jokeId: id, jokeTimer});\n      return;\n\n    } else {\n     requestJoke(id).then(({data, isInvalid}) => {\n      \n        oldJokes[data.id] = data;\n        const jokeTimer = setTimeout(()=> this.getNewJoke(), 20000);\n        this.setState({currentJoke: data, jokeId: data.id, oldJokes, invalidRequest: isInvalid, jokeTimer});\n    })\n    .catch(response => {\n      console.log(response);\n      console.log('error in get new joke');\n      return setTimeout(()=> this.getNewJoke() , 5000)\n    });\n    }\n  }\n  handleInputChange = (e) => {\n    this.setState({userInput: e.target.value})\n  }\n\n  handleInputSubmit = (e) => {\n    clearTimeout(this.state.jokeTimer);\n    this.getNewJoke(Number(this.state.userInput));\n    e.preventDefault();\n  }\n\n  callRandomJoke = () => {\n    clearTimeout(this.state.jokeTimer);\n    this.getNewJoke();\n  }\n  componentDidMount() {\n    this.getNewJoke();\n  }\n\n  render () {\n    let joke = '';\n    let author = '';\n\n   \n\n    if(this.state.currentJoke) {\n\n      joke = DOMPurify.sanitize(this.state.currentJoke.joke);\n      author = DOMPurify.sanitize(this.state.currentJoke.author);\n    }\n    return (\n      \n      <div className={styles.JokeContainer}>\n\n        <Joke joke={joke} author={author} isInvalid={this.state.invalidRequest} />\n\n        <InputForm\n          callRandomJoke={this.callRandomJoke}\n          loading={!this.state.currentJoke}\n          userInput={this.state.userInput}\n          handleInputChange={this.handleInputChange} \n          handleInputSubmit={this.handleInputSubmit} \n        />\n       \n      </div>\n      \n    )\n  }\n}\n\nexport default JokeContainer;","import React from 'react';\nimport './App.module.css';\n\nimport './components/JokeContainer';\nimport JokeContainer from './components/JokeContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}